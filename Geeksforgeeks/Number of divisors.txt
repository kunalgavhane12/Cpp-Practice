/*************************************************************************
Given an integer N, find the number of divisors of N that are divisible by 3.
 

Example 1:

Input : 6
Output: 2
Explanation: 1, 2, 3, 6 are divisors 
of 6 out of which 3 and 6 are divisible 
by 3.

Example 2:

Input: 10
Output: 0
Explanation: 1, 2, 5 and 10 are divisors 
of 10 but none of them are divisible by 3.
 

Your Task:

You don't need to read or print anything. Your task is to complete the function count_divisors() which takes N as input parameter and returns count of divisor which are divisible by 3.
 

Expected Time Complexity: O(sqrt(N))
Expected Space Complexity: O(1)
 

Constraints:
1 <= N <= 105

**************************************************************************/
//{ Driver Code Starts
//Initial Template for C++


#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function Template for C++

class Solution
{
	public:
		int count_divisors(int n)
		{
		    //Code here.
		    int cnt=0;
		   for(int i=1; i*i<=n; i++)
		   {
		       if(n%i==0)
		       {
		           if(i%3==0)
		           cnt++;
		       }
		       if(n/i!=i)
		       {
		           if(n%i==0)
		           {
		               int val=n/i;
		               if(val%3==0)
		               cnt++;
		           }
		       
		       }
		   }
		    return cnt;
		}
};

//{ Driver Code Starts.
int main(){
    int T;
    cin >> T;
    while(T--)
    {
    	int n;
    	cin >> n;
    	Solution ob;
    	int ans = ob.count_divisors(n);
    	cout << ans << "\n";
    }
	return 0;
}
// } Driver Code Ends