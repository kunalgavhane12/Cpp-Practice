/************************************************************************
Given two strings in lowercase, your task is to find minimum number of manipulations required to make two strings anagram without deleting any character. If two strings contains same data set in any order then strings are called Anagrams.

Example 1:

Input:
S1 = "aba", S2 = "baa", N = 3
Output: 0
Explanation: Both the strings are already
anagrams.
â€‹Example 2:

Input: 
S1 = "ddcf", S2 = "cedk", N = 4
Output: 2
Explanation: We can change 'e' and 'k' in
S2 to 'd' and 'f' to make both the strings
anagram. 

Your Task:
You don't need to read input or print anything. Your task is to complete the function minManipulation() which takes the strings S1 and S2 and their length N as inputs and returns the minimum number of manipulations required to make both the strings anagram.


Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).


Constraints:
1<=N<=105

|S1| = |S2| = N

|S| represents the length of the string S.

*************************************************************************/
//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;
int minManipulation (int n, string s1, string s2);
int main()
{
    int t; cin >> t;
    while (t--)
    {
        int n; cin >> n;
        string s1; cin >> s1;
        string s2; cin >> s2;

        cout << minManipulation (n, s1, s2) << endl;
    }
}
// Contributed By: Pranay Bansal

// } Driver Code Ends


int minManipulation (int N, string S1, string S2)
{
    // your code here
    int res=0;
    int cnt1[26]={0},cnt2[26]={0};
    for(int i=0; i<S1.length(); i++)
    {
        cnt1[S1[i]-'a']++;
    }
    for(int i=0; i<S2.length(); i++)
    {
        cnt2[S2[i]-'a']++;
    }
    for(int i=0; i<26; i++)
    {
        if(cnt1[i]-cnt2[i]>0)
        res+=cnt1[i]-cnt2[i];
    }
    return res;
}
