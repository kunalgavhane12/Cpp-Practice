/******************************************************************************
Given a number, reverse it and add it to itself unless it becomes a palindrome or number of iterations becomes more than 5.

Example 1:

Input: n = 23
Output: 55 
Explanation: reverse(23) = 32,then 32+23
= 55 which is a palindrome. 

Example 2:

Input: n = 30
Output: 33
Explanation: reverse(30) = 3,then 3+30
= 33 which is palindrome. 

Your Task:  
You dont need to read input or print anything. Complete the function isSumPalindrome() which takes n as input parameter and returns that palindrome number if it becomes a palindrome else returns -1.

Expected Time Complexity: O(n*k),where k<=5.
Expected Auxiliary Space: O(1)

Constraints:
1<= n <=104

*******************************************************************************/
//{ Driver Code Starts
// Initial Template for C++
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++
class Solution {
  public:
    long long isSumPalindrome(long long n){
        // code here
        int i=0;
        while(i<=5)
        {
            long long N=n,sum=0;
            while(n)
            {
                sum=sum*10+(n%10);
                n/=10;
            }
            if(sum==N)
            return sum;
            n=sum+N;
            i++;
        }
        return -1;
    }
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        long long n;
        cin >> n;
        Solution ob;
        cout<<ob.isSumPalindrome(n)<<endl;
    }
    return 0;
}

// } Driver Code Ends